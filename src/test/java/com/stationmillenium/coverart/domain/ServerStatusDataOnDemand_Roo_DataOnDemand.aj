// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stationmillenium.coverart.domain;

import com.stationmillenium.coverart.domain.ServerStatus;
import com.stationmillenium.coverart.domain.ServerStatusDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ServerStatusDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ServerStatusDataOnDemand: @Component;
    
    private Random ServerStatusDataOnDemand.rnd = new SecureRandom();
    
    private List<ServerStatus> ServerStatusDataOnDemand.data;
    
    public ServerStatus ServerStatusDataOnDemand.getNewTransientServerStatus(int index) {
        ServerStatus obj = new ServerStatus();
        setDateOfChange(obj, index);
        setServerUp(obj, index);
        return obj;
    }
    
    public void ServerStatusDataOnDemand.setDateOfChange(ServerStatus obj, int index) {
        Calendar dateOfChange = Calendar.getInstance();
        obj.setDateOfChange(dateOfChange);
    }
    
    public void ServerStatusDataOnDemand.setServerUp(ServerStatus obj, int index) {
        Boolean serverUp = true;
        obj.setServerUp(serverUp);
    }
    
    public ServerStatus ServerStatusDataOnDemand.getSpecificServerStatus(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ServerStatus obj = data.get(index);
        Long id = obj.getId();
        return ServerStatus.findServerStatus(id);
    }
    
    public ServerStatus ServerStatusDataOnDemand.getRandomServerStatus() {
        init();
        ServerStatus obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ServerStatus.findServerStatus(id);
    }
    
    public boolean ServerStatusDataOnDemand.modifyServerStatus(ServerStatus obj) {
        return false;
    }
    
    public void ServerStatusDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ServerStatus.findServerStatusEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ServerStatus' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ServerStatus>();
        for (int i = 0; i < 10; i++) {
            ServerStatus obj = getNewTransientServerStatus(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
