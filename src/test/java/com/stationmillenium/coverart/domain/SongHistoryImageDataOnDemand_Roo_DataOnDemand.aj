// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stationmillenium.coverart.domain;

import com.stationmillenium.coverart.domain.SongHistoryImage;
import com.stationmillenium.coverart.domain.SongHistoryImage.Provider;
import com.stationmillenium.coverart.domain.SongHistoryImageDataOnDemand;
import com.stationmillenium.coverart.domain.SongItemDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SongHistoryImageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SongHistoryImageDataOnDemand: @Component;
    
    private Random SongHistoryImageDataOnDemand.rnd = new SecureRandom();
    
    private List<SongHistoryImage> SongHistoryImageDataOnDemand.data;
    
    @Autowired
    private SongItemDataOnDemand SongHistoryImageDataOnDemand.songItemDataOnDemand;
    
    public SongHistoryImage SongHistoryImageDataOnDemand.getNewTransientSongHistoryImage(int index) {
        SongHistoryImage obj = new SongHistoryImage();
        setFileName(obj, index);
        setHeight(obj, index);
        setProvider(obj, index);
        setWidth(obj, index);
        return obj;
    }
    
    public void SongHistoryImageDataOnDemand.setFileName(SongHistoryImage obj, int index) {
        String fileName = "fileName_" + index;
        obj.setFileName(fileName);
    }
    
    public void SongHistoryImageDataOnDemand.setHeight(SongHistoryImage obj, int index) {
        int height = index;
        if (height < 10) {
            height = 10;
        }
        obj.setHeight(height);
    }
    
    public void SongHistoryImageDataOnDemand.setProvider(SongHistoryImage obj, int index) {
        Provider provider = null;
        obj.setProvider(provider);
    }
    
    public void SongHistoryImageDataOnDemand.setWidth(SongHistoryImage obj, int index) {
        int width = index;
        if (width < 10) {
            width = 10;
        }
        obj.setWidth(width);
    }
    
    public SongHistoryImage SongHistoryImageDataOnDemand.getSpecificSongHistoryImage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SongHistoryImage obj = data.get(index);
        Long id = obj.getId();
        return SongHistoryImage.findSongHistoryImage(id);
    }
    
    public SongHistoryImage SongHistoryImageDataOnDemand.getRandomSongHistoryImage() {
        init();
        SongHistoryImage obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return SongHistoryImage.findSongHistoryImage(id);
    }
    
    public boolean SongHistoryImageDataOnDemand.modifySongHistoryImage(SongHistoryImage obj) {
        return false;
    }
    
    public void SongHistoryImageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SongHistoryImage.findSongHistoryImageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SongHistoryImage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SongHistoryImage>();
        for (int i = 0; i < 10; i++) {
            SongHistoryImage obj = getNewTransientSongHistoryImage(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
