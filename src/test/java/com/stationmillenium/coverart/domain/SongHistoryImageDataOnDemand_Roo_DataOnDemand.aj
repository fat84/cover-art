// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stationmillenium.coverart.domain;

import com.stationmillenium.coverart.domain.SongHistoryImage;
import com.stationmillenium.coverart.domain.SongHistoryImageDataOnDemand;
import com.stationmillenium.coverart.domain.SongItem;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect SongHistoryImageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SongHistoryImageDataOnDemand: @Component;
    
    private Random SongHistoryImageDataOnDemand.rnd = new SecureRandom();
    
    private List<SongItem> SongHistoryImageDataOnDemand.data;
    
    public SongItem SongHistoryImageDataOnDemand.getNewTransientSongItem(int index) {
        SongItem obj = new SongItem();
        setArtist(obj, index);
        setImage(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void SongHistoryImageDataOnDemand.setArtist(SongItem obj, int index) {
        String artist = "artist_" + index;
        if (artist.length() > 200) {
            artist = artist.substring(0, 200);
        }
        obj.setArtist(artist);
    }
    
    public void SongHistoryImageDataOnDemand.setImage(SongItem obj, int index) {
        SongHistoryImage image = null;
        obj.setImage(image);
    }
    
    public void SongHistoryImageDataOnDemand.setTitle(SongItem obj, int index) {
        String title = "title_" + index;
        if (title.length() > 200) {
            title = title.substring(0, 200);
        }
        obj.setTitle(title);
    }
    
    public SongItem SongHistoryImageDataOnDemand.getSpecificSongItem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SongItem obj = data.get(index);
        Long id = obj.getId();
        return SongItem.findSongItem(id);
    }
    
    public SongItem SongHistoryImageDataOnDemand.getRandomSongItem() {
        init();
        SongItem obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return SongItem.findSongItem(id);
    }
    
    public boolean SongHistoryImageDataOnDemand.modifySongItem(SongItem obj) {
        return false;
    }
    
    public void SongHistoryImageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SongItem.findSongItemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SongItem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SongItem>();
        for (int i = 0; i < 10; i++) {
            SongItem obj = getNewTransientSongItem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
